/*
Deployment script for hollywoo_school

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "hollywoo_school"
:setvar DefaultFilePrefix "hollywoo_school"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [hollywoo_tony]...';


GO
CREATE LOGIN [hollywoo_tony]
    WITH PASSWORD = N'zx$qheq|bbfmr$vZv!xJbqwumsFT7_&#$!~<db<qrhifWfck', SID = 0xD9A21EB9ED3E2F40B70857F3FD925DE9, DEFAULT_DATABASE = [hollywoo_school], DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;


GO
PRINT N'Creating [hollywoo_tony]...';


GO
CREATE USER [hollywoo_tony] FOR LOGIN [hollywoo_tony]
    WITH DEFAULT_SCHEMA = [hollywoo_tony];


GO
REVOKE CONNECT TO [hollywoo_tony];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'hollywoo_tony';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_securityadmin', @membername = N'hollywoo_tony';


GO
PRINT N'Creating [hollywoo_dao]...';


GO
CREATE SCHEMA [hollywoo_dao]
    AUTHORIZATION [hollywoo_tony];


GO
PRINT N'Creating [hollywoo_tony]...';


GO
CREATE SCHEMA [hollywoo_tony]
    AUTHORIZATION [hollywoo_tony];


GO
PRINT N'Creating [dbo].[__MigrationHistory]...';


GO
CREATE TABLE [dbo].[__MigrationHistory] (
    [MigrationId]    NVARCHAR (150)  NOT NULL,
    [ContextKey]     NVARCHAR (300)  NOT NULL,
    [Model]          VARBINARY (MAX) NOT NULL,
    [ProductVersion] NVARCHAR (32)   NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED ([MigrationId] ASC, [ContextKey] ASC)
);


GO
PRINT N'Creating [dbo].[ActualPayments]...';


GO
CREATE TABLE [dbo].[ActualPayments] (
    [ActualPaymentId]     INT             NOT NULL,
    [StudentId]           INT             NOT NULL,
    [PeriodId]            INT             NULL,
    [ActualPaymentDate]   DATE            NULL,
    [ActualPaymentAmount] NUMERIC (18, 2) NULL,
    [Comments]            NVARCHAR (MAX)  NULL,
    [CreatedDate]         DATETIME        NULL,
    [CreatedBy]           INT             NULL,
    CONSTRAINT [PK_ActualPayments] PRIMARY KEY CLUSTERED ([ActualPaymentId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetRoles]...';


GO
CREATE TABLE [dbo].[AspNetRoles] (
    [Id]   NVARCHAR (128) NOT NULL,
    [Name] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetRoles].[RoleNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [RoleNameIndex]
    ON [dbo].[AspNetRoles]([Name] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserClaims]...';


GO
CREATE TABLE [dbo].[AspNetUserClaims] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [UserId]     NVARCHAR (128) NOT NULL,
    [ClaimType]  NVARCHAR (MAX) NULL,
    [ClaimValue] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserClaims].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserClaims]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserLogins]...';


GO
CREATE TABLE [dbo].[AspNetUserLogins] (
    [LoginProvider] NVARCHAR (128) NOT NULL,
    [ProviderKey]   NVARCHAR (128) NOT NULL,
    [UserId]        NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserLogins].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserLogins]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserRoles]...';


GO
CREATE TABLE [dbo].[AspNetUserRoles] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserRoles].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserRoles]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserRoles].[IX_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RoleId]
    ON [dbo].[AspNetUserRoles]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUsers]...';


GO
CREATE TABLE [dbo].[AspNetUsers] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUsers].[UserNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UserNameIndex]
    ON [dbo].[AspNetUsers]([UserName] ASC);


GO
PRINT N'Creating [dbo].[Courses]...';


GO
CREATE TABLE [dbo].[Courses] (
    [Code]    NCHAR (3)    NOT NULL,
    [Display] VARCHAR (50) NULL,
    [Hours]   INT          NULL,
    CONSTRAINT [PK_Courses] PRIMARY KEY CLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[DailyEvent]...';


GO
CREATE TABLE [dbo].[DailyEvent] (
    [DailyEventId] INT          IDENTITY (1, 1) NOT NULL,
    [StudentId]    INT          NOT NULL,
    [PunchInTime]  DATETIME     NULL,
    [PunchOutTime] DATETIME     NULL,
    [CreateDate]   DATETIME     NOT NULL,
    [UpdatedDate]  DATETIME     NULL,
    [ClockId]      VARCHAR (20) NULL,
    CONSTRAINT [PK_DailyEvent] PRIMARY KEY CLUSTERED ([DailyEventId] ASC)
);


GO
PRINT N'Creating [dbo].[Genders]...';


GO
CREATE TABLE [dbo].[Genders] (
    [Code] CHAR (1)     NOT NULL,
    [Name] VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_Genders] PRIMARY KEY CLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[LoanStatusCodes]...';


GO
CREATE TABLE [dbo].[LoanStatusCodes] (
    [LoanStatusCode] NCHAR (2)      NOT NULL,
    [Description]    NVARCHAR (100) NULL,
    CONSTRAINT [PK_LoanStatusCodes] PRIMARY KEY CLUSTERED ([LoanStatusCode] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentStatusCodes]...';


GO
CREATE TABLE [dbo].[PaymentStatusCodes] (
    [PaymentStatusCode] NCHAR (2)      NOT NULL,
    [Description]       NVARCHAR (100) NULL,
    CONSTRAINT [PK_PaymentStatusCodes] PRIMARY KEY CLUSTERED ([PaymentStatusCode] ASC)
);


GO
PRINT N'Creating [dbo].[PlannedPayments]...';


GO
CREATE TABLE [dbo].[PlannedPayments] (
    [PaymentPeriodId]      INT             IDENTITY (1, 1) NOT NULL,
    [StudentId]            INT             NOT NULL,
    [PaymentStatusCode]    NCHAR (2)       NULL,
    [PaymentDueDate]       DATE            NULL,
    [PlannedPaymentAmount] NUMERIC (18, 2) NULL,
    CONSTRAINT [PK_PlannedPayments] PRIMARY KEY CLUSTERED ([PaymentPeriodId] ASC)
);


GO
PRINT N'Creating [dbo].[StateCodes]...';


GO
CREATE TABLE [dbo].[StateCodes] (
    [Code]      CHAR (2)     NOT NULL,
    [StateName] VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_States] PRIMARY KEY CLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[Status]...';


GO
CREATE TABLE [dbo].[Status] (
    [Id]          INT          IDENTITY (1, 1) NOT NULL,
    [Code]        NCHAR (1)    NOT NULL,
    [Description] VARCHAR (25) NOT NULL,
    CONSTRAINT [PK_Status_1] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StudentLoans]...';


GO
CREATE TABLE [dbo].[StudentLoans] (
    [StudentLoanId]      INT             IDENTITY (1, 1) NOT NULL,
    [LoanStatusCode]     NCHAR (2)       NOT NULL,
    [StudentId]          INT             NOT NULL,
    [LoanAmount]         NUMERIC (18, 2) NULL,
    [LoanPeriod]         INT             NULL,
    [FirstRepaymentDate] DATE            NULL,
    [LastRepaymentDate]  DATE            NULL,
    [Comments]           NVARCHAR (MAX)  NULL,
    [CreatedDate]        DATETIME        NULL,
    CONSTRAINT [PK_StudentLoans] PRIMARY KEY CLUSTERED ([StudentLoanId] ASC)
);


GO
PRINT N'Creating [dbo].[Students]...';


GO
CREATE TABLE [dbo].[Students] (
    [Id]             INT           IDENTITY (1, 1) NOT NULL,
    [StudentNumber]  INT           NOT NULL,
    [FirstName]      VARCHAR (50)  NOT NULL,
    [LastName]       VARCHAR (50)  NOT NULL,
    [MiddleName]     VARCHAR (50)  NULL,
    [Suffix]         VARCHAR (50)  NULL,
    [Address1]       VARCHAR (100) NULL,
    [Address2]       VARCHAR (100) NULL,
    [City]           VARCHAR (50)  NULL,
    [State]          CHAR (2)      NULL,
    [ZipCode]        CHAR (10)     NULL,
    [SSN]            VARCHAR (11)  NULL,
    [Gender]         CHAR (1)      NULL,
    [BirthDate]      DATE          NULL,
    [HomePhone]      VARCHAR (12)  NULL,
    [CellPhone]      VARCHAR (12)  NULL,
    [Email]          VARCHAR (50)  NULL,
    [StatusId]       INT           NOT NULL,
    [EnrolledDate]   DATE          NULL,
    [GraduationDate] DATE          NULL,
    [Behavior]       INT           NULL,
    [CreatedDate]    DATETIME2 (7) NULL,
    [CreatedBy]      VARCHAR (50)  NULL,
    [Type]           NCHAR (10)    NULL,
    [Course]         CHAR (3)      NULL,
    [XferHours]      INT           NULL,
    [TuitionPaid]    BIT           NULL,
    CONSTRAINT [PK_Students] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StudentType]...';


GO
CREATE TABLE [dbo].[StudentType] (
    [Type]        NCHAR (10)   NOT NULL,
    [Description] VARCHAR (50) NULL,
    [Curriculum]  INT          NOT NULL,
    CONSTRAINT [PK_StudentType] PRIMARY KEY CLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [dbo].[DF_ActualPayments_CreatedDate]...';


GO
ALTER TABLE [dbo].[ActualPayments]
    ADD CONSTRAINT [DF_ActualPayments_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ActualPayments_CreatedBy]...';


GO
ALTER TABLE [dbo].[ActualPayments]
    ADD CONSTRAINT [DF_ActualPayments_CreatedBy] DEFAULT ((0)) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_DailyEvent_CreateDate]...';


GO
ALTER TABLE [dbo].[DailyEvent]
    ADD CONSTRAINT [DF_DailyEvent_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_StudentLoans_CreatedDate]...';


GO
ALTER TABLE [dbo].[StudentLoans]
    ADD CONSTRAINT [DF_StudentLoans_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Students_StatusId]...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_StatusId] DEFAULT ((1)) FOR [StatusId];


GO
PRINT N'Creating [dbo].[DF_Students_CreatedDate]...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Students_CreatedBy]...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_CreatedBy] DEFAULT ('System') FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Students_XferHours]...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_XferHours] DEFAULT ((0)) FOR [XferHours];


GO
PRINT N'Creating unnamed constraint on [dbo].[Students]...';


GO
ALTER TABLE [dbo].[Students]
    ADD DEFAULT 0 FOR [TuitionPaid];


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims]
    ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins]
    ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[vwActiveStudentsLatestEvent]...';


GO

CREATE VIEW [dbo].[vwActiveStudentsLatestEvent]
AS
SELECT 
	   [Id]
      ,[StudentNumber]
      ,[FirstName]
      ,[LastName]
      ,[MiddleName]
	  ,CASE 
		WHEN de.[PunchInTime] IS NOT NULL AND de.[PunchOutTime] IS NULL THEN 'IN' 
		WHEN de.[PunchInTime] IS NULL AND de.[PunchOutTime] IS NULL THEN 'OUT'
		WHEN de.[PunchInTime] IS NULL AND de.[PunchOutTime] IS NOT NULL THEN 'OUT'
		WHEN de.[PunchInTime] IS NOT NULL AND de.[PunchOutTime] IS NOT NULL THEN 'OUT'
		ELSE 'OUT' 
		END AS [LatestStatus]
      ,de.CreateDate AS [LatestEventDate] 
	  ,de.[DailyEventId]
FROM [dbo].[Students] s
OUTER APPLY(
	SELECT TOP 1 *
	FROM [dbo].[DailyEvent] de
	WHERE s.[Id] = de.[StudentId]
	ORDER BY de.CreateDate desc
) de
WHERE [StatusId] = 1
GO
PRINT N'Creating [dbo].[vwDailyEvents]...';


GO









CREATE VIEW [dbo].[vwDailyEvents]
AS
SELECT        e.DailyEventId, s.StudentNumber, s.Id AS StudentId, s.FirstName, s.MiddleName, s.LastName, s.[Course], s.[XferHours], s.[CreatedDate] AS [StartDate], e.PunchInTime, 
                         e.PunchOutTime, CAST(DATEDIFF(MINUTE, e.PunchInTime, e.PunchOutTime) / 60.0 AS numeric(10, 2)) AS DailyTotalHours, 
                         e.CreateDate, e.UpdatedDate, e.[ClockId],
						 CASE 
							WHEN [PunchInTime] IS NOT NULL AND [PunchOutTime] IS NULL THEN 'IN' 
							WHEN [PunchInTime] IS NULL AND [PunchOutTime] IS NULL THEN 'OUT'
							WHEN [PunchInTime] IS NULL AND [PunchOutTime] IS NOT NULL THEN 'OUT'
							WHEN [PunchInTime] IS NOT NULL AND [PunchOutTime] IS NOT NULL THEN 'OUT'
							ELSE 'OUT' 
							END AS Status
FROM            dbo.DailyEvent e INNER JOIN
                         dbo.Students s  ON e.StudentId = s.Id
GO
PRINT N'Creating [dbo].[vwPaymentSchedules]...';


GO
CREATE VIEW dbo.vwPaymentSchedules
AS
SELECT        dbo.PlannedPayments.PaymentPeriodId, dbo.PlannedPayments.StudentId, dbo.PlannedPayments.PaymentStatusCode, dbo.PlannedPayments.PaymentDueDate, 
                         dbo.PlannedPayments.PlannedPaymentAmount, dbo.ActualPayments.ActualPaymentId, dbo.ActualPayments.ActualPaymentDate, 
                         dbo.ActualPayments.ActualPaymentAmount, dbo.ActualPayments.Comments, dbo.ActualPayments.CreatedDate, dbo.ActualPayments.CreatedBy, 
                         dbo.PaymentStatusCodes.Description
FROM            dbo.PlannedPayments LEFT OUTER JOIN
                         dbo.PaymentStatusCodes ON dbo.PlannedPayments.PaymentStatusCode = dbo.PaymentStatusCodes.PaymentStatusCode LEFT OUTER JOIN
                         dbo.ActualPayments ON dbo.PlannedPayments.PaymentPeriodId = dbo.ActualPayments.PeriodId
GO
PRINT N'Creating [dbo].[vwStudentEvents]...';


GO
CREATE VIEW [dbo].[vwStudentEvents]
AS
SELECT s.[Id], s.[StudentNumber], s.[FirstName], s.[LastName], s.[MiddleName], s.[HomePhone], MAX(e.[CreateDate]) AS LastEvent
FROM [dbo].[Students] s
	LEFT OUTER JOIN [dbo].[DailyEvent] e ON e.[StudentId] = s.[Id]
GROUP BY s.[Id], s.[StudentNumber], s.[FirstName], s.[LastName], s.[MiddleName], s.[HomePhone]
GO
PRINT N'Creating [dbo].[uspAddDailyEvent]...';


GO

--EXEC dbo.uspAddDailyEvent @StudentId=12345, getdate()
CREATE PROC [dbo].[uspAddDailyEvent]
	@StudentId			INT,
	@Timestamp			DATETIME
AS
SET NOCOUNT ON
BEGIN

	INSERT INTO [dbo].[DailyEvent] ([StudentId], [PunchInTime], [CreateDate], [UpdatedDate])
	VALUES(@StudentId, @Timestamp, @Timestamp, @Timestamp)

	SELECT SCOPE_IDENTITY()

END
GO
PRINT N'Creating [dbo].[uspAddStudent]...';


GO

CREATE PROC [dbo].[uspAddStudent]
	@Id	INT,
    @StudentNumber int,
    @FirstName VARCHAR(50),
    @LastName VARCHAR(50),
    @MiddleName VARCHAR(50),
    @Suffix VARCHAR(50),
    @Address1 VARCHAR(100),
    @Address2 VARCHAR(100),
    @City VARCHAR(50),
    @State VARCHAR(50),
    @ZipCode VARCHAR(10),
    @SSN VARCHAR(11),
    @Gender VARCHAR(1),
    @BirthDate Date,
    @HomePhone VARCHAR(12),
    @CellPhone VARCHAR(12),
    @Email VARCHAR(50),
    @StatusId int,
    @EnrolledDate Date,
    @GraduationDate Date,
    @Behavior int,
	@Course	VARCHAR(10)
AS
SET NOCOUNT ON
BEGIN

	IF NOT EXISTS(SELECT 1 FROM [dbo].[Students] WHERE [StudentNumber] = @StudentNumber)
	BEGIN

		INSERT INTO [dbo].[Students](
		  [StudentNumber]
		  ,[FirstName]
		  ,[LastName]
		  ,[MiddleName]
		  ,[Suffix]
		  ,[Address1]
		  ,[Address2]
		  ,[City]
		  ,[State]
		  ,[ZipCode]
		  ,[SSN]
		  ,[Gender]
		  ,[BirthDate]
		  ,[HomePhone]
		  ,[CellPhone]
		  ,[Email]
		  ,[StatusId]
		  ,[EnrolledDate]
		  ,[GraduationDate]
		  ,[Behavior]	
		  ,[Course]
		)
		VALUES (
		  @StudentNumber,
		  @FirstName,
		  @LastName,
		  @MiddleName,
		  @Suffix,
		  @Address1,
		  @Address2,
		  @City,
		  @State,
		  @ZipCode,
		  @SSN,
		  @Gender,
		  @BirthDate,
		  @HomePhone,
		  @CellPhone,
		  @Email,
		  @StatusId,
		  @EnrolledDate,
		  @GraduationDate,
		  @Behavior, 
		  @Course	
		);		

		SELECT CAST(SCOPE_IDENTITY() AS int)

	END;

END;
GO
PRINT N'Creating [dbo].[uspDeleteStudent]...';


GO

CREATE PROC [dbo].[uspDeleteStudent]
	@Id		INT
AS
SET NOCOUNT ON
BEGIN

	DELETE FROM [dbo].[Students]
	WHERE Id = @Id

END
GO
PRINT N'Creating [dbo].[uspDropStudent]...';


GO
CREATE PROC dbo.uspDropStudent
	@Id	INT
AS
SET NOCOUNT ON
BEGIN

	UPDATE [dbo].[Students]
	SET [StatusId] = 3
	WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[uspGeneratePaymentPlan]...';


GO
-- EXEC dbo.uspGeneratePaymentPlan @StudentId=123456
CREATE PROC dbo.uspGeneratePaymentPlan
	@StudentId			INT
AS
SET NOCOUNT ON
BEGIN

	DECLARE	@LoanId				INT
	DECLARE @LoanAmt			numeric(18,2)
	DECLARE	@LoanPeriod			INT
	DECLARE	@FirstRepaymentDate	Date	

	SELECT @LoanId = [StudentLoanId]
		,@LoanAmt = [LoanAmount]
		,@LoanPeriod = [LoanPeriod]
		,@FirstRepaymentDate = [FirstRepaymentDate]
	
	FROM [dbo].[StudentLoans]
	WHERE [StudentId] = @StudentId


	DECLARE @i	INT = 1
	DECLARE @PaymentDueDate	Date = @FirstRepaymentDate

	WHILE @i < @LoanPeriod 
	BEGIN
		INSERT INTO [dbo].[PlannedPayments]
		(
			  [StudentId]
			, [PaymentStatusCode]
			, [PaymentDueDate]
			, [PlannedPaymentAmount]
		)
		VALUES
		(
			 @StudentId
			,'PP'
			,@PaymentDueDate
			,@LoanAmt/@LoanPeriod  
		)

		SET @i = @i + 1
		SET @PaymentDueDate = DATEADD(month,1,@PaymentDueDate)
	END

	-- Last Payment
	DECLARE @TotalPaid	numeric(18,2)
	SELECT @TotalPaid = SUM([PlannedPaymentAmount])
	FROM [dbo].[PlannedPayments]
	WHERE [StudentId] = @StudentId

	INSERT INTO [dbo].[PlannedPayments]
	(
		[StudentId]
		, [PaymentStatusCode]
		, [PaymentDueDate]
		, [PlannedPaymentAmount]
	)
	VALUES
	(
		@StudentId
		,'PP'
		,@PaymentDueDate
		,@LoanAmt -  @TotalPaid
	)

END
GO
PRINT N'Creating [dbo].[uspGeStudentEventsByDateRange]...';


GO

-- EXEC dbo.uspGeStudentEventsByDateRange 15, '8/9/2015', '2015-08-30'
CREATE PROC [dbo].[uspGeStudentEventsByDateRange]
	@studentId	int,
	@beginDate VARCHAR(10),
	@endDate VARCHAR(10)
AS 
SET NOCOUNT ON
BEGIN

	DECLARE @date1	DATETIME, @date2  DATETIME
	 
	SET @date1 = DATEADD(day,DATEDIFF(day,0,@BeginDate),0)
	SET @date2 = DATEADD(day,DATEDIFF(day,-1,@EndDate),0)

SELECT [DailyEventId]
      ,[StudentNumber]
      ,[StudentId]
      ,[FirstName]
      ,[MiddleName]
      ,[LastName]
      ,[PunchInTime]
      ,[PunchOutTime]
      ,[DailyTotalHours]
      ,[CreateDate]
      ,[UpdatedDate]
      ,[Status]
	  ,CAST([CreateDate] AS Date) AS [DateOnly]
	  ,[ClockId]
	FROM [dbo].[vwDailyEvents]
	WHERE  StudentId = @studentId
		AND [CreateDate] BETWEEN @date1 AND @date2
	
	ORDER BY CreateDate

END
GO
PRINT N'Creating [dbo].[uspGetActiveStudentInClass]...';


GO
-- EXEC [dbo].[uspGetActiveStudentInClass]
CREATE PROCEDURE [dbo].[uspGetActiveStudentInClass]
AS
SET NOCOUNT ON
BEGIN
	SELECT [Id]
		  ,[StudentNumber]
		  ,[FirstName]
		  ,[LastName]
		  ,[MiddleName]
		  ,[LatestStatus]
		  ,[LatestEventDate]
		  ,[DailyEventId]
	FROM [dbo].[vwActiveStudentsLatestEvent]
	WHERE [LatestEventDate] BETWEEN DATEADD(day,DATEDIFF(day,0,GETDATE()),0) AND DATEADD(day,DATEDIFF(day,-1,GETDATE()),0)
	AND [LatestStatus] = 'IN'
END
GO
PRINT N'Creating [dbo].[uspGetActiveStudentList]...';


GO


CREATE PROCEDURE [dbo].[uspGetActiveStudentList]
AS
SET NOCOUNT ON
BEGIN
	SELECT [Id]
		  ,[StudentNumber]
		  ,[FirstName]
		  ,[LastName]
		  ,[MiddleName]
		  ,[LatestStatus]
		  ,[LatestEventDate]
	FROM [dbo].[vwActiveStudentsLatestEvent] a
	WHERE NOT EXISTS (
		SELECT [Id]
			  ,[StudentNumber]
			  ,[FirstName]
			  ,[LastName]
			  ,[MiddleName]
			  ,[LatestStatus]
			  ,[LatestEventDate]
		FROM [dbo].[vwActiveStudentsLatestEvent] b
		WHERE b.[LatestEventDate] BETWEEN DATEADD(day,DATEDIFF(day,0,GETDATE()),0) AND DATEADD(day,DATEDIFF(day,-1,GETDATE()),0)
		AND b.[LatestStatus] = 'IN'	
		AND b.Id = a.Id

	)
END
GO
PRINT N'Creating [dbo].[uspGetEventsByDateRange]...';


GO

-- EXEC dbo.uspGetEventsByDateRange '2015-07-26', '2015-07-28'
CREATE PROC dbo.uspGetEventsByDateRange
	@beginDate VARCHAR(10),
	@endDate VARCHAR(10)
AS 
SET NOCOUNT ON
BEGIN

	DECLARE @date1	DATETIME, @date2  DATETIME
	 
	SET @date1 = DATEADD(day,DATEDIFF(day,0,@BeginDate),0)
	SET @date2 = DATEADD(day,DATEDIFF(day,-1,@EndDate),0)

	SELECT *
	FROM [dbo].[vwDailyEvents]
	WHERE [CreateDate] BETWEEN @date1 AND @date2
	ORDER BY CreateDate

END
GO
PRINT N'Creating [dbo].[uspGetGenders]...';


GO
-- EXEC dbo.uspGetGenders
CREATE PROC [dbo].[uspGetGenders]
AS
SET NOCOUNT ON
BEGIN

	SELECT [Code]
		,[Name]
	FROM [dbo].[Genders]

END
GO
PRINT N'Creating [dbo].[uspGetStateCodes]...';


GO
-- EXEC dbo.uspGetStateCodes
CREATE PROC [dbo].[uspGetStateCodes]
AS
SET NOCOUNT ON
BEGIN
	
	SELECT [Code],
		[StateName]
	FROM [dbo].[StateCodes]

END
GO
PRINT N'Creating [dbo].[uspGetStudent]...';


GO

-- EXEC dbo.uspGetStudent 1
CREATE PROC [dbo].[uspGetStudent]
	@Id		INT	
AS
SET NOCOUNT ON
BEGIN

	SELECT [Id]
		  ,[StudentNumber]
		  ,[FirstName]
		  ,[LastName]
		  ,[MiddleName]
		  ,[Suffix]
		  ,[Address1]
		  ,[Address2]
		  ,[City]
		  ,[State]
		  ,[ZipCode]
		  ,[SSN]
		  ,[Gender]
		  ,[BirthDate]
		  ,[HomePhone]
		  ,[CellPhone]
		  ,[Email]
		  ,[StatusId]
		  ,[EnrolledDate]
		  ,[GraduationDate]
		  ,[Behavior]
		  ,[CreatedDate]
		  ,[CreatedBy]
	  FROM [dbo].[Students]	
	  WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[uspGetStudentCurrentEvent]...';


GO
--  EXEC dbo.uspGetStudentCurrentEvent 123456
CREATE PROC [dbo].[uspGetStudentCurrentEvent]
	@StudentNumber			INT
AS
SET NOCOUNT ON
BEGIN

	DECLARE @StudentId INT

	-- Student Output
	SELECT s.[Id]
		  ,s.[StudentNumber]
		  ,s.[FirstName]
		  ,s.[MiddleName]
		  ,s.[LastName]
		  ,s.[StatusId]
	FROM [dbo].[Students] s
	WHERE s.[StudentNumber] = @StudentNumber


	SELECT 
		[DailyEventId]
		,[PunchInTime]
		,[PunchOutTime]
		, CASE 
				WHEN [PunchInTime] IS NULL AND [PunchOutTime] IS NULL THEN 'OUT'
				WHEN [PunchInTime] IS NOT NULL AND [PunchOutTime] IS NULL THEN 'IN'
				WHEN [PunchInTime] IS NULL AND [PunchOutTime] IS NOT NULL THEN 'OUT'
				WHEN [PunchInTime] IS NOT NULL AND [PunchOutTime] IS NOT NULL THEN 'OUT'
		  END AS [Status]

	FROM [dbo].[DailyEvent] d
		INNER JOIN [dbo].[Students] s ON s.Id = d.[StudentId]
	WHERE s.[StudentNumber] = @StudentNumber
		AND CreateDate BETWEEN DATEADD(day,DATEDIFF(day,0,GETDATE()),0) AND DATEADD(day,DATEDIFF(day,-1,GETDATE()),0)
		
END
GO
PRINT N'Creating [dbo].[uspGetStudentDailyEvents]...';


GO
-- EXEC [dbo].[uspGetStudentDailyEvents] 1663806
CREATE PROC [dbo].[uspGetStudentDailyEvents]
	@StudentNumber				INT
AS
SET NOCOUNT ON
BEGIN

	SELECT [DailyEventId]
		  ,[StudentId]
		  ,[StudentNumber]
		  ,[FirstName]
		  ,[MiddleName]
		  ,[LastName]
		  ,[PunchInTime]
		  ,[PunchOutTime]
		  ,[DailyTotalHours]
		  ,[CreateDate]
		  ,[Status]
	  FROM [dbo].[vwDailyEvents]
	  WHERE [StudentNumber] = @StudentNumber

END
GO
PRINT N'Creating [dbo].[uspGetStudents]...';


GO
-- EXEC dbo.uspGetStudents null,null,null
CREATE PROC [dbo].[uspGetStudents]
	@StudentNumber		INT				= null
	,@FirstName			VARCHAR(50)		= NULL
	,@LastName			VARCHAR(50)		= NULL
AS
SET NOCOUNT ON
BEGIN

SELECT [Id]
      ,[StudentNumber]
      ,[FirstName]
      ,[LastName]
      ,[MiddleName]
      ,[Suffix]
      ,[Address1]
      ,[Address2]
      ,[City]
      ,[State]
      ,[ZipCode]
      ,[SSN]
      ,[Gender]
      ,[BirthDate]
      ,[HomePhone]
      ,[CellPhone]
      ,[Email]
      ,[StatusId]
      ,[EnrolledDate]
      ,[GraduationDate]
      ,[Behavior]
      ,[CreatedDate]
      ,[CreatedBy]
	  ,[Type]
  FROM [dbo].[Students]
  WHERE [StatusId] = 1
	AND (@StudentNumber IS NULL OR [StudentNumber] = @StudentNumber)
	AND (ISNULL(@FirstName,'')='' OR [FirstName] = @FirstName)
	AND (ISNULL(@LastName,'')='' OR [LastName] = @LastName)

END
GO
PRINT N'Creating [dbo].[uspGetStudentTodayEvent]...';


GO
-- EXEC [dbo].[uspGetStudentTodayEvent] 123456
CREATE PROC [dbo].[uspGetStudentTodayEvent]
	@StudentNumber			INT
AS
SET NOCOUNT ON
BEGIN

	SELECT TOP 1
		   [DailyEventId]
		  ,[StudentNumber]
		  ,[FirstName]
		  ,[MiddleName]
		  ,[LastName]
		  ,[PunchInTime]
		  ,[PunchOutTime]
		  ,ISNULL([DailyTotalHours],0.0)
		  ,[CreateDate]
		  ,[UpdatedDate]
		  ,[Status]
	  FROM [dbo].[vwDailyEvents]
	  WHERE [StudentNumber] = @StudentNumber
		AND CreateDate BETWEEN DATEADD(day,DATEDIFF(day,0,GETDATE()),0) AND DATEADD(day,DATEDIFF(day,-1,GETDATE()),0)
	  ORDER BY CreateDate DESC

END
GO
PRINT N'Creating [dbo].[uspLookupStudent]...';


GO
--  EXEC dbo.uspLookupStudent 123456
CREATE PROC [dbo].[uspLookupStudent]
	@StudentNumber		INT
AS
SET NOCOUNT ON
BEGIN

	-- Student Output
	SELECT s.[Id]
		  ,s.[StudentNumber]
		  ,s.[FirstName]
		  ,s.[MiddleName]
		  ,s.[LastName]
		  ,s.[Address1]
		  ,s.[Address2]
		  ,s.[City]
		  ,s.[State]
		  ,s.[Zipcode]
		  ,s.[HomePhone]
		  ,s.[CellPhone]
		  ,s.[StatusId]
		  ,MAX(ISNULL(e.[UpdatedDate],GETDATE())) AS [LastActivityDate]
	FROM [dbo].[Students] s
		LEFT OUTER JOIN [dbo].[DailyEvent] e ON e.[StudentId] = s.[Id]
	WHERE s.[StudentNumber] = @StudentNumber
	GROUP BY s.[Id]
			,s.[StudentNumber]
			,s.[FirstName]
			,s.[MiddleName]
			,s.[LastName]
			,s.[StatusId]
			,s.[Address1]
			,s.[Address2]
			,s.[City]
			,s.[State]
			,s.[Zipcode]
			,s.[HomePhone]
			,s.[CellPhone]	  
		
END
GO
PRINT N'Creating [dbo].[uspPunchIn]...';


GO
-- EXEC dbo.uspPunchIn @StudentId=12345
-- EXEC dbo.uspPunchIn @StudentId=12345, 'KITCHENAIO'
CREATE PROC [dbo].[uspPunchIn]
	@StudentId		INT,
	@ClockId	VARCHAR(20) = NULL
AS
SET NOCOUNT ON
BEGIN

	INSERT INTO [dbo].[DailyEvent] ([StudentId], [PunchInTime],[UpdatedDate], [ClockId])
	VALUES(@StudentId, getdate(), getdate(), @ClockId)

	SELECT SCOPE_IDENTITY()

END
GO
PRINT N'Creating [dbo].[uspPunchOut]...';


GO

-- EXEC dbo.uspPunchOut @DailyEventId=2
CREATE PROC [dbo].[uspPunchOut]
	@DailyEventId	INT
AS
SET NOCOUNT ON
BEGIN

	UPDATE [dbo].[DailyEvent]
	SET [PunchOutTime] = getdate()
		,[UpdatedDate] = getdate()		
	WHERE [DailyEventId] = @DailyEventId

END
GO
PRINT N'Creating [dbo].[uspSaveStudent]...';


GO

CREATE PROC [dbo].[uspSaveStudent]
	@Id		INT	OUTPUT,
    @StudentNumber int,
    @FirstName VARCHAR(50),
    @LastName VARCHAR(50),
    @MiddleName VARCHAR(50),
    @Suffix VARCHAR(50),
    @Address1 VARCHAR(100),
    @Address2 VARCHAR(100),
    @City VARCHAR(50),
    @State VARCHAR(50),
    @ZipCode VARCHAR(10),
    @SSN VARCHAR(11),
    @Gender VARCHAR(1),
    @BirthDate Date,
    @HomePhone VARCHAR(12),
    @CellPhone VARCHAR(12),
    @Email VARCHAR(50),
    @StatusId int,
    @EnrolledDate Date,
    @GraduationDate Date,
    @Behavior int,
	@Course VARCHAR(10)

AS
SET NOCOUNT ON
BEGIN

	UPDATE [dbo].[Students]
    SET	StudentNumber = @StudentNumber,
		FirstName = @FirstName,
		LastName = @LastName,
		MiddleName = @MiddleName,
		Suffix = @Suffix,
		Address1 = @Address1,
		Address2 = @Address2,
		City = @City,
		[State] = @State,
		ZipCode = @ZipCode,
		SSN = @SSN,
		Gender = @Gender,
		BirthDate = @BirthDate,
		HomePhone = @HomePhone,
		CellPhone = @CellPhone,
		Email = @Email,
		StatusId = @StatusId,
		EnrolledDate = @EnrolledDate,
		GraduationDate = @GraduationDate,
		Behavior = @Behavior,
		Course = @Course
	WHERE Id = @Id

	IF @@ROWCOUNT = 0
	BEGIN

		INSERT INTO [dbo].[Students](
		  [StudentNumber]
		  ,[FirstName]
		  ,[LastName]
		  ,[MiddleName]
		  ,[Suffix]
		  ,[Address1]
		  ,[Address2]
		  ,[City]
		  ,[State]
		  ,[ZipCode]
		  ,[SSN]
		  ,[Gender]
		  ,[BirthDate]
		  ,[HomePhone]
		  ,[CellPhone]
		  ,[Email]
		  ,[StatusId]
		  ,[EnrolledDate]
		  ,[GraduationDate]
		  ,[Behavior]	
		  ,[Course]
		)
		VALUES (
		  @StudentNumber,
		  @FirstName,
		  @LastName,
		  @MiddleName,
		  @Suffix,
		  @Address1,
		  @Address2,
		  @City,
		  @State,
		  @ZipCode,
		  @SSN,
		  @Gender,
		  @BirthDate,
		  @HomePhone,
		  @CellPhone,
		  @Email,
		  @StatusId,
		  @EnrolledDate,
		  @GraduationDate,
		  @Behavior,
		  @Course 	
		);

		SET @Id = CAST(SCOPE_IDENTITY() AS int)

	END;

END;
GO
PRINT N'Creating [dbo].[uspStudentSummaryRpt]...';


GO
-- EXEC [dbo].[uspStudentSummaryRpt]
CREATE PROC [dbo].[uspStudentSummaryRpt]
AS
SET NOCOUNT ON
BEGIN
	SELECT s.[Id]
		, s.[StudentNumber]
		, MAX(s.[FirstName]) AS [FirstName]
		, MAX(s.[LastName]) AS [LastName]
		, MAX(ISNULL(s.[MiddleName],'')) AS [MiddleName]
		, MAX(ISNULL(s.[Suffix],'')) AS [Suffix]
		, MAX(s.[CreatedDate]) AS [StartDate]
		, MAX(s.[Course]) AS [Course]
		, MAX(ISNULL(c.[Hours],0)) AS [CourseHours]
		, MAX(ISNULL(s.[XferHours],0)) AS [XferHours]
		, SUM(ISNULL([DailyTotalHours],0)) AS [HoursAttend]
		, (SUM(ISNULL([DailyTotalHours],0)) + SUM(ISNULL(s.XferHours,0))) AS [TotalHours]
		, ((SUM(ISNULL([DailyTotalHours],0)) + SUM(ISNULL(s.XferHours,0))) / MAX(ISNULL(c.[Hours],0))) * 100 AS [CompletionPCt]
	FROM [dbo].[Students] s
		INNER JOIN [dbo].[Courses] c ON c.[Code] = s.[Course]
		LEFT OUTER JOIN [dbo].[vwDailyEvents] e ON e.[StudentId] = s.[Id]
	WHERE [StatusId] = 1
	GROUP BY s.[Id], s.[StudentNumber]
	ORDER BY MAX(s.[LastName]), MAX(s.[FirstName]) 
END
GO
PRINT N'Creating [dbo].[uspUpdateDailyEvent]...';


GO

-- EXEC dbo.uspUpdateDailyEvent 1, getdate()
CREATE PROC [dbo].[uspUpdateDailyEvent]
	@DailyEventId			INT,
	@Timestamp				DATETIME
AS
SET NOCOUNT ON
BEGIN

	UPDATE [dbo].[DailyEvent]
	SET [PunchOutTime] = @Timestamp
		,[UpdatedDate] = @Timestamp
	WHERE [DailyEventId] = @DailyEventId

END
GO
PRINT N'Creating [dbo].[uspUpdateStudent]...';


GO

CREATE PROC [dbo].[uspUpdateStudent]
	@Id	INT,
    @StudentNumber int,
    @FirstName VARCHAR(50),
    @LastName VARCHAR(50),
    @MiddleName VARCHAR(50),
    @Suffix VARCHAR(50),
    @Address1 VARCHAR(100),
    @Address2 VARCHAR(100),
    @City VARCHAR(50),
    @State VARCHAR(50),
    @ZipCode VARCHAR(10),
    @SSN VARCHAR(11),
    @Gender VARCHAR(1),
    @BirthDate Date,
    @HomePhone VARCHAR(12),
    @CellPhone VARCHAR(12),
    @Email VARCHAR(50),
    @StatusId int,
    @EnrolledDate Date,
    @GraduationDate Date,
    @Behavior int,
	@Course VARCHAR(10)
AS
SET NOCOUNT ON
BEGIN

	UPDATE [dbo].[Students]
    SET	StudentNumber = @StudentNumber,
		FirstName = @FirstName,
		LastName = @LastName,
		MiddleName = @MiddleName,
		Suffix = @Suffix,
		Address1 = @Address1,
		Address2 = @Address2,
		City = @City,
		[State] = @State,
		ZipCode = @ZipCode,
		SSN = @SSN,
		Gender = @Gender,
		BirthDate = @BirthDate,
		HomePhone = @HomePhone,
		CellPhone = @CellPhone,
		Email = @Email,
		StatusId = @StatusId,
		EnrolledDate = @EnrolledDate,
		GraduationDate = @GraduationDate,
		Behavior = @Behavior,
		Course = @Course
	WHERE Id = @Id

END
GO
PRINT N'Creating [dbo].[vwDailyEvents].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[25] 4[35] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "DailyEvent"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 244
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Students"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 329
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwDailyEvents';


GO
PRINT N'Creating [dbo].[vwDailyEvents].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwDailyEvents';


GO
PRINT N'Creating [dbo].[vwPaymentSchedules].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "PlannedPayments (dbo)"
            Begin Extent = 
               Top = 6
               Left = 524
               Bottom = 238
               Right = 747
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "PaymentStatusCodes (dbo)"
            Begin Extent = 
               Top = 6
               Left = 290
               Bottom = 232
               Right = 486
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ActualPayments (dbo)"
            Begin Extent = 
               Top = 24
               Left = 830
               Bottom = 259
               Right = 1044
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 10
         Width = 284
         Width = 1500
         Width = 1950
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 1335
         Table = 2805
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwPaymentSchedules';


GO
PRINT N'Creating [dbo].[vwPaymentSchedules].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwPaymentSchedules';


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
